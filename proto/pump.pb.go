// Code generated by protoc-gen-go.
// source: pump.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	pump.proto

It has these top-level messages:
	WriteBinlogReq
	WriteBinlogResp
	PullBinlogReq
	PullBinlogResp
	Pos
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteBinlogReq struct {
	ClusterID uint64 `protobuf:"varint,1,opt,name=clusterID" json:"clusterID,omitempty"`
	StartTS   uint64 `protobuf:"varint,2,opt,name=startTS" json:"startTS,omitempty"`
	CommitTS  uint64 `protobuf:"varint,3,opt,name=commitTS" json:"commitTS,omitempty"`
	Type      int32  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Payload   []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *WriteBinlogReq) Reset()                    { *m = WriteBinlogReq{} }
func (m *WriteBinlogReq) String() string            { return proto1.CompactTextString(m) }
func (*WriteBinlogReq) ProtoMessage()               {}
func (*WriteBinlogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WriteBinlogResp struct {
	Suc    int32  `protobuf:"varint,1,opt,name=suc" json:"suc,omitempty"`
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
}

func (m *WriteBinlogResp) Reset()                    { *m = WriteBinlogResp{} }
func (m *WriteBinlogResp) String() string            { return proto1.CompactTextString(m) }
func (*WriteBinlogResp) ProtoMessage()               {}
func (*WriteBinlogResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PullBinlogReq struct {
	ClusterID uint64 `protobuf:"varint,1,opt,name=clusterID" json:"clusterID,omitempty"`
	StartFrom *Pos   `protobuf:"bytes,2,opt,name=startFrom" json:"startFrom,omitempty"`
	BatchNum  int32  `protobuf:"varint,3,opt,name=batchNum" json:"batchNum,omitempty"`
}

func (m *PullBinlogReq) Reset()                    { *m = PullBinlogReq{} }
func (m *PullBinlogReq) String() string            { return proto1.CompactTextString(m) }
func (*PullBinlogReq) ProtoMessage()               {}
func (*PullBinlogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PullBinlogReq) GetStartFrom() *Pos {
	if m != nil {
		return m.StartFrom
	}
	return nil
}

type PullBinlogResp struct {
	Suc      int32    `protobuf:"varint,1,opt,name=suc" json:"suc,omitempty"`
	Errmsg   string   `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	EndPos   *Pos     `protobuf:"bytes,3,opt,name=endPos" json:"endPos,omitempty"`
	Payloads [][]byte `protobuf:"bytes,4,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (m *PullBinlogResp) Reset()                    { *m = PullBinlogResp{} }
func (m *PullBinlogResp) String() string            { return proto1.CompactTextString(m) }
func (*PullBinlogResp) ProtoMessage()               {}
func (*PullBinlogResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PullBinlogResp) GetEndPos() *Pos {
	if m != nil {
		return m.EndPos
	}
	return nil
}

type Pos struct {
	Suffix uint32 `protobuf:"varint,1,opt,name=suffix" json:"suffix,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *Pos) Reset()                    { *m = Pos{} }
func (m *Pos) String() string            { return proto1.CompactTextString(m) }
func (*Pos) ProtoMessage()               {}
func (*Pos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto1.RegisterType((*WriteBinlogReq)(nil), "proto.WriteBinlogReq")
	proto1.RegisterType((*WriteBinlogResp)(nil), "proto.WriteBinlogResp")
	proto1.RegisterType((*PullBinlogReq)(nil), "proto.PullBinlogReq")
	proto1.RegisterType((*PullBinlogResp)(nil), "proto.PullBinlogResp")
	proto1.RegisterType((*Pos)(nil), "proto.Pos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pump service

type PumpClient interface {
	WriteBinlog(ctx context.Context, in *WriteBinlogReq, opts ...grpc.CallOption) (*WriteBinlogResp, error)
	PullBinlog(ctx context.Context, in *PullBinlogReq, opts ...grpc.CallOption) (*PullBinlogResp, error)
}

type pumpClient struct {
	cc *grpc.ClientConn
}

func NewPumpClient(cc *grpc.ClientConn) PumpClient {
	return &pumpClient{cc}
}

func (c *pumpClient) WriteBinlog(ctx context.Context, in *WriteBinlogReq, opts ...grpc.CallOption) (*WriteBinlogResp, error) {
	out := new(WriteBinlogResp)
	err := grpc.Invoke(ctx, "/proto.Pump/WriteBinlog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pumpClient) PullBinlog(ctx context.Context, in *PullBinlogReq, opts ...grpc.CallOption) (*PullBinlogResp, error) {
	out := new(PullBinlogResp)
	err := grpc.Invoke(ctx, "/proto.Pump/PullBinlog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pump service

type PumpServer interface {
	WriteBinlog(context.Context, *WriteBinlogReq) (*WriteBinlogResp, error)
	PullBinlog(context.Context, *PullBinlogReq) (*PullBinlogResp, error)
}

func RegisterPumpServer(s *grpc.Server, srv PumpServer) {
	s.RegisterService(&_Pump_serviceDesc, srv)
}

func _Pump_WriteBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBinlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PumpServer).WriteBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pump/WriteBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PumpServer).WriteBinlog(ctx, req.(*WriteBinlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pump_PullBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullBinlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PumpServer).PullBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pump/PullBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PumpServer).PullBinlog(ctx, req.(*PullBinlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pump_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Pump",
	HandlerType: (*PumpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBinlog",
			Handler:    _Pump_WriteBinlog_Handler,
		},
		{
			MethodName: "PullBinlog",
			Handler:    _Pump_PullBinlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("pump.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0x4b, 0x4b, 0xf3, 0x40,
	0x14, 0xfd, 0xf2, 0x25, 0xa9, 0xf6, 0xd6, 0x56, 0xb9, 0xd8, 0x12, 0x8a, 0x0b, 0x99, 0x55, 0x57,
	0x5d, 0x54, 0x5c, 0x15, 0x5c, 0x88, 0x08, 0x6e, 0xa4, 0x8c, 0x82, 0xeb, 0x34, 0x4d, 0x6a, 0x20,
	0xe9, 0x8c, 0xf3, 0x00, 0xeb, 0xd6, 0x7f, 0xe0, 0x2f, 0x76, 0x66, 0x9c, 0x3e, 0x02, 0x5d, 0xe8,
	0xaa, 0x73, 0xce, 0x6d, 0xee, 0x79, 0xcc, 0x00, 0x70, 0x5d, 0xf3, 0x31, 0x17, 0x4c, 0x31, 0x8c,
	0xdd, 0x0f, 0xf9, 0x0a, 0xa0, 0xf7, 0x22, 0x4a, 0x95, 0xdf, 0x96, 0xab, 0x8a, 0x2d, 0x69, 0xfe,
	0x86, 0x17, 0xd0, 0xce, 0x2a, 0x2d, 0x55, 0x2e, 0x1e, 0xee, 0x92, 0xe0, 0x32, 0x18, 0x45, 0x74,
	0x47, 0x60, 0x02, 0x47, 0x52, 0xa5, 0x42, 0x3d, 0x3f, 0x25, 0xff, 0xdd, 0x6c, 0x03, 0x71, 0x08,
	0xc7, 0x19, 0xab, 0xeb, 0xd2, 0x8e, 0x42, 0x37, 0xda, 0x62, 0x44, 0x88, 0xd4, 0x9a, 0xe7, 0x49,
	0x64, 0xf8, 0x98, 0xba, 0xb3, 0xdd, 0xc4, 0xd3, 0x75, 0xc5, 0xd2, 0x45, 0x12, 0x1b, 0xfa, 0x84,
	0x6e, 0x20, 0x99, 0xc2, 0x69, 0xc3, 0x93, 0xe4, 0x78, 0x06, 0xa1, 0xd4, 0x99, 0xb3, 0x13, 0x53,
	0x7b, 0xc4, 0x01, 0xb4, 0x72, 0x21, 0x6a, 0xb9, 0x74, 0x3e, 0xda, 0xd4, 0x23, 0x22, 0xa1, 0x3b,
	0xd3, 0x55, 0xf5, 0xdb, 0x3c, 0x23, 0x68, 0xbb, 0x00, 0xf7, 0x82, 0xd5, 0x6e, 0x53, 0x67, 0x02,
	0x3f, 0x15, 0x8d, 0x67, 0x4c, 0xd2, 0xdd, 0xd0, 0xe6, 0x9b, 0xa7, 0x2a, 0x7b, 0x7d, 0xd4, 0xb5,
	0xcb, 0x17, 0xd3, 0x2d, 0x26, 0x1f, 0xd0, 0xdb, 0x17, 0xfd, 0x8b, 0x61, 0x24, 0x86, 0x5f, 0x2d,
	0x8c, 0x98, 0xdb, 0xda, 0x94, 0xf7, 0x13, 0xab, 0xed, 0xcb, 0x91, 0xa6, 0xc3, 0xd0, 0x94, 0xb5,
	0xc5, 0xe4, 0x1a, 0x42, 0xfb, 0x17, 0xb3, 0x5e, 0xea, 0xa2, 0x28, 0xdf, 0x9d, 0x66, 0x97, 0x7a,
	0x64, 0x79, 0x56, 0x14, 0x32, 0x57, 0xfe, 0xbe, 0x3c, 0x9a, 0x7c, 0x06, 0x10, 0xcd, 0xcc, 0x7b,
	0xc0, 0x1b, 0xe8, 0xec, 0xb5, 0x8d, 0x7d, 0x2f, 0xdf, 0x7c, 0x15, 0xc3, 0xc1, 0x21, 0x5a, 0x72,
	0xf2, 0x0f, 0xa7, 0x00, 0xbb, 0xec, 0x78, 0xbe, 0x71, 0xbf, 0x7f, 0x07, 0xc3, 0xfe, 0x01, 0xd6,
	0x7e, 0x3c, 0x6f, 0x39, 0xfe, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x78, 0x58, 0x05, 0xee, 0x9b,
	0x02, 0x00, 0x00,
}
